# git-cliff configuration for PNGer
# Configuration file for git-cliff changelog generator
# See https://git-cliff.org/docs/configuration for details

[changelog]
# Header displayed at the top of the changelog
header = """
# Changelog

All notable changes to PNGer will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""

# Template for the changelog body
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first }}{% if commit.remote.username %} by @{{ commit.remote.username }}{% endif %}{% if commit.remote.pr_number %} in [#{{ commit.remote.pr_number }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/{{ commit.remote.pr_number }}){% endif %}
    {% endfor %}
{% endfor %}\n
"""

# Footer at the bottom of the changelog
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/compare/{{ release.previous.version }}...{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/compare/{{ release.previous.version }}...HEAD
    {% endif -%}
{% endfor %}

<!-- generated by git-cliff -->
"""

# Remove blank lines from output
trim = true

[git]
# Parse commits according to conventional commits
conventional_commits = true
# Filter out merge commits
filter_unconventional = true
# Process commits
split_commits = false
# Regex for parsing and grouping commits
commit_parsers = [
    # Breaking changes
    { message = "^.*!:", group = "🏗️ Breaking Changes" },
    { message = "^feat\\(.*\\)!:", group = "🏗️ Breaking Changes" },
    { message = "^fix\\(.*\\)!:", group = "🏗️ Breaking Changes" },
    { message = "^refactor\\(.*\\)!:", group = "🏗️ Breaking Changes" },
    
    # Features
    { message = "^feat", group = "🚀 Features" },
    
    # Bug fixes
    { message = "^fix", group = "🐛 Bug Fixes" },
    
    # Performance improvements
    { message = "^perf", group = "⚡ Performance" },
    
    # Refactoring
    { message = "^refactor", group = "♻️ Refactoring" },
    
    # Documentation
    { message = "^docs", group = "📚 Documentation" },
    
    # Tests
    { message = "^test", group = "🧪 Testing" },
    
    # Build system/dependencies
    { message = "^build", group = "📦 Build System" },
    { message = "^deps", group = "📦 Dependencies" },
    
    # CI/CD
    { message = "^ci", group = "👷 CI/CD" },
    
    # Chores
    { message = "^chore", group = "🔧 Chores" },
    { message = "^style", group = "🎨 Styling" },
    
    # Skip certain commits
    { message = "^Merge", skip = true },
    { message = "^WIP", skip = true },
    { message = "^wip", skip = true },
    { body = "^$", skip = true },  # Skip commits with empty body
]

# Protect breaking changes commits from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# Filter out commits that are not conventional
filter_unconventional = true
# Regex for matching git tags
tag_pattern = "v[0-9].*"
# Skip tags that don't match the pattern
skip_tags = "beta|alpha|rc"
# Ignore tags that match this regex
ignore_tags = ""
# Sort the tags chronologically
date_order = false
# Sort the commits inside sections by oldest first
sort_commits = "oldest"

# Version bumping configuration
[bump]
# Automatically bump minor version for features
features_always_bump_minor = true
# Automatically bump major version for breaking changes
breaking_always_bump_major = true
# Initial tag if no tags exist
initial_tag = "0.1.0"

# GitHub integration
[remote.github]
owner = "spiritum"
repo = "pnger"
# Token can be set via GITHUB_TOKEN environment variable
token = ""