name: Release and Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

env:
  CARGO_TERM_COLOR: always

jobs:
  release-and-publish:
    name: Create Release and Publish Crate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git-cliff
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install git-cliff
        uses: taiki-e/install-action@git-cliff

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features

      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings

      - name: Check formatting
        run: cargo fmt --check

      - name: Get current version
        id: current-version
        run: |
          current_version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "version=$current_version" >> $GITHUB_OUTPUT

      - name: Calculate next version using git-cliff
        id: next-version
        run: |
          # Use git-cliff to calculate next version based on conventional commits
          next_version=$(git cliff --bumped-version)
          echo "Current version: ${{ steps.current-version.outputs.version }}"
          echo "Next version (calculated by git-cliff): $next_version"
          echo "version=$next_version" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Cargo.toml version
        run: |
          next_version="${{ steps.next-version.outputs.version }}"
          sed -i "s/^version = \".*\"/version = \"$next_version\"/" Cargo.toml
          echo "Updated Cargo.toml to version $next_version"

      - name: Build release binary
        run: cargo build --release

      - name: Dry run publish
        run: cargo publish --dry-run --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          next_version="${{ steps.next-version.outputs.version }}"
          # Generate changelog for this version
          git cliff --tag "v$next_version" --unreleased --prepend CHANGELOG.md
          
          # Extract release notes for GitHub release
          git cliff --tag "v$next_version" --unreleased --strip all > release_notes.md
          
          echo "Generated changelog and release notes"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit version bump and changelog
        run: |
          next_version="${{ steps.next-version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml CHANGELOG.md
          git commit -m "chore: bump version to v$next_version

          - Update Cargo.toml version to $next_version
          - Update CHANGELOG.md with release notes
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git tag "v$next_version"

      - name: Push changes and tags
        run: |
          git push origin main
          git push origin --tags

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.next-version.outputs.version }}
          release_name: Release v${{ steps.next-version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload release binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: target/release/pnger
          asset_name: pnger-linux-x86_64
          asset_content_type: application/octet-stream

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Post-publish verification
        run: |
          echo "‚úÖ Release v${{ steps.next-version.outputs.version }} created successfully"
          echo "‚úÖ Changelog generated and updated"
          echo "‚úÖ Crate published to crates.io"
          echo "‚úÖ Binary uploaded to GitHub release"
          echo ""
          echo "üîó Release URL: ${{ steps.create-release.outputs.html_url }}"
          echo "üì¶ Crate URL: https://crates.io/crates/pnger/${{ steps.next-version.outputs.version }}"
          echo "üìù Changelog: Updated CHANGELOG.md with conventional commit parsing"